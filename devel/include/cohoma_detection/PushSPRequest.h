// Generated by gencpp from file cohoma_detection/PushSPRequest.msg
// DO NOT EDIT!


#ifndef COHOMA_DETECTION_MESSAGE_PUSHSPREQUEST_H
#define COHOMA_DETECTION_MESSAGE_PUSHSPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cohoma_detection/StrategicPoint.h>

namespace cohoma_detection
{
template <class ContainerAllocator>
struct PushSPRequest_
{
  typedef PushSPRequest_<ContainerAllocator> Type;

  PushSPRequest_()
    : strat_point()  {
    }
  PushSPRequest_(const ContainerAllocator& _alloc)
    : strat_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::cohoma_detection::StrategicPoint_<ContainerAllocator>  _strat_point_type;
  _strat_point_type strat_point;





  typedef boost::shared_ptr< ::cohoma_detection::PushSPRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohoma_detection::PushSPRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PushSPRequest_

typedef ::cohoma_detection::PushSPRequest_<std::allocator<void> > PushSPRequest;

typedef boost::shared_ptr< ::cohoma_detection::PushSPRequest > PushSPRequestPtr;
typedef boost::shared_ptr< ::cohoma_detection::PushSPRequest const> PushSPRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohoma_detection::PushSPRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohoma_detection::PushSPRequest_<ContainerAllocator1> & lhs, const ::cohoma_detection::PushSPRequest_<ContainerAllocator2> & rhs)
{
  return lhs.strat_point == rhs.strat_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohoma_detection::PushSPRequest_<ContainerAllocator1> & lhs, const ::cohoma_detection::PushSPRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohoma_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::PushSPRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::PushSPRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::PushSPRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8ac723540a01390ab7e2992d92c999e";
  }

  static const char* value(const ::cohoma_detection::PushSPRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8ac723540a01390ULL;
  static const uint64_t static_value2 = 0xab7e2992d92c999eULL;
};

template<class ContainerAllocator>
struct DataType< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohoma_detection/PushSPRequest";
  }

  static const char* value(const ::cohoma_detection::PushSPRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohoma_detection/StrategicPoint strat_point\n"
"\n"
"================================================================================\n"
"MSG: cohoma_detection/StrategicPoint\n"
"uint8 UNKNOWN=0\n"
"uint8 HYBRID=1\n"
"uint8 TERRESTRIAL=2\n"
"uint8 AERIAL=3\n"
"uint8 DEFUSED=0\n"
"uint8 ACTIVE=1\n"
"uint8 UNALTERABLE=2\n"
"string id\n"
"geographic_msgs/GeoPoint position\n"
"uint8 type\n"
"uint8 status\n"
"float32 radius\n"
"string message\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::cohoma_detection::PushSPRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.strat_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PushSPRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohoma_detection::PushSPRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohoma_detection::PushSPRequest_<ContainerAllocator>& v)
  {
    s << indent << "strat_point: ";
    s << std::endl;
    Printer< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.strat_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHOMA_DETECTION_MESSAGE_PUSHSPREQUEST_H
