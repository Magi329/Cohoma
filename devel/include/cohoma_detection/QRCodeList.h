// Generated by gencpp from file cohoma_detection/QRCodeList.msg
// DO NOT EDIT!


#ifndef COHOMA_DETECTION_MESSAGE_QRCODELIST_H
#define COHOMA_DETECTION_MESSAGE_QRCODELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cohoma_detection/QRCode.h>

namespace cohoma_detection
{
template <class ContainerAllocator>
struct QRCodeList_
{
  typedef QRCodeList_<ContainerAllocator> Type;

  QRCodeList_()
    : qrc_list()  {
    }
  QRCodeList_(const ContainerAllocator& _alloc)
    : qrc_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::cohoma_detection::QRCode_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cohoma_detection::QRCode_<ContainerAllocator> >> _qrc_list_type;
  _qrc_list_type qrc_list;





  typedef boost::shared_ptr< ::cohoma_detection::QRCodeList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohoma_detection::QRCodeList_<ContainerAllocator> const> ConstPtr;

}; // struct QRCodeList_

typedef ::cohoma_detection::QRCodeList_<std::allocator<void> > QRCodeList;

typedef boost::shared_ptr< ::cohoma_detection::QRCodeList > QRCodeListPtr;
typedef boost::shared_ptr< ::cohoma_detection::QRCodeList const> QRCodeListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohoma_detection::QRCodeList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohoma_detection::QRCodeList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohoma_detection::QRCodeList_<ContainerAllocator1> & lhs, const ::cohoma_detection::QRCodeList_<ContainerAllocator2> & rhs)
{
  return lhs.qrc_list == rhs.qrc_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohoma_detection::QRCodeList_<ContainerAllocator1> & lhs, const ::cohoma_detection::QRCodeList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohoma_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::QRCodeList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::QRCodeList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::QRCodeList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c78061eb6384448d766f4bff956a1b9";
  }

  static const char* value(const ::cohoma_detection::QRCodeList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c78061eb6384448ULL;
  static const uint64_t static_value2 = 0xd766f4bff956a1b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohoma_detection/QRCodeList";
  }

  static const char* value(const ::cohoma_detection::QRCodeList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohoma_detection/QRCode[] qrc_list\n"
"================================================================================\n"
"MSG: cohoma_detection/QRCode\n"
"string raw_value #QR Code raw value\n"
"geographic_msgs/GeoPoint position #Trap position when detected\n"
"string nature     #Information about the trap signifacation in the real context\n"
"uint16 id         #Identificator of the trap\n"
"uint8 ngz_radius  #No Go Zone Radius around the trap\n"
"bool dsb_status   #The trap can be disabled or not\n"
"string dsb_code   #Code to transmit to disable the trap\n"
"bool contact_dsb  #The trap should be disabled by contact or not\n"
"string dsb_vector #Type of drone that can disable the trap\n"
"string other      #Diverse complementary (miscellaneous) informations\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::cohoma_detection::QRCodeList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.qrc_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QRCodeList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohoma_detection::QRCodeList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohoma_detection::QRCodeList_<ContainerAllocator>& v)
  {
    s << indent << "qrc_list[]" << std::endl;
    for (size_t i = 0; i < v.qrc_list.size(); ++i)
    {
      s << indent << "  qrc_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cohoma_detection::QRCode_<ContainerAllocator> >::stream(s, indent + "    ", v.qrc_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHOMA_DETECTION_MESSAGE_QRCODELIST_H
