// Generated by gencpp from file cohoma_detection/StrategicPoint.msg
// DO NOT EDIT!


#ifndef COHOMA_DETECTION_MESSAGE_STRATEGICPOINT_H
#define COHOMA_DETECTION_MESSAGE_STRATEGICPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geographic_msgs/GeoPoint.h>

namespace cohoma_detection
{
template <class ContainerAllocator>
struct StrategicPoint_
{
  typedef StrategicPoint_<ContainerAllocator> Type;

  StrategicPoint_()
    : id()
    , position()
    , type(0)
    , status(0)
    , radius(0.0)
    , message()  {
    }
  StrategicPoint_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , position(_alloc)
    , type(0)
    , status(0)
    , radius(0.0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _status_type;
  _status_type status;

   typedef float _radius_type;
  _radius_type radius;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(HYBRID)
  #undef HYBRID
#endif
#if defined(_WIN32) && defined(TERRESTRIAL)
  #undef TERRESTRIAL
#endif
#if defined(_WIN32) && defined(AERIAL)
  #undef AERIAL
#endif
#if defined(_WIN32) && defined(DEFUSED)
  #undef DEFUSED
#endif
#if defined(_WIN32) && defined(ACTIVE)
  #undef ACTIVE
#endif
#if defined(_WIN32) && defined(UNALTERABLE)
  #undef UNALTERABLE
#endif

  enum {
    UNKNOWN = 0u,
    HYBRID = 1u,
    TERRESTRIAL = 2u,
    AERIAL = 3u,
    DEFUSED = 0u,
    ACTIVE = 1u,
    UNALTERABLE = 2u,
  };


  typedef boost::shared_ptr< ::cohoma_detection::StrategicPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohoma_detection::StrategicPoint_<ContainerAllocator> const> ConstPtr;

}; // struct StrategicPoint_

typedef ::cohoma_detection::StrategicPoint_<std::allocator<void> > StrategicPoint;

typedef boost::shared_ptr< ::cohoma_detection::StrategicPoint > StrategicPointPtr;
typedef boost::shared_ptr< ::cohoma_detection::StrategicPoint const> StrategicPointConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohoma_detection::StrategicPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohoma_detection::StrategicPoint_<ContainerAllocator1> & lhs, const ::cohoma_detection::StrategicPoint_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.type == rhs.type &&
    lhs.status == rhs.status &&
    lhs.radius == rhs.radius &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohoma_detection::StrategicPoint_<ContainerAllocator1> & lhs, const ::cohoma_detection::StrategicPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohoma_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::StrategicPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::StrategicPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::StrategicPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3914a8b8468b58e16ddea332d23f34ee";
  }

  static const char* value(const ::cohoma_detection::StrategicPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3914a8b8468b58e1ULL;
  static const uint64_t static_value2 = 0x6ddea332d23f34eeULL;
};

template<class ContainerAllocator>
struct DataType< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohoma_detection/StrategicPoint";
  }

  static const char* value(const ::cohoma_detection::StrategicPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UNKNOWN=0\n"
"uint8 HYBRID=1\n"
"uint8 TERRESTRIAL=2\n"
"uint8 AERIAL=3\n"
"uint8 DEFUSED=0\n"
"uint8 ACTIVE=1\n"
"uint8 UNALTERABLE=2\n"
"string id\n"
"geographic_msgs/GeoPoint position\n"
"uint8 type\n"
"uint8 status\n"
"float32 radius\n"
"string message\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::cohoma_detection::StrategicPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.type);
      stream.next(m.status);
      stream.next(m.radius);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StrategicPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohoma_detection::StrategicPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohoma_detection::StrategicPoint_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHOMA_DETECTION_MESSAGE_STRATEGICPOINT_H
