// Generated by gencpp from file cohoma_detection/TrapDisableRequest.msg
// DO NOT EDIT!


#ifndef COHOMA_DETECTION_MESSAGE_TRAPDISABLEREQUEST_H
#define COHOMA_DETECTION_MESSAGE_TRAPDISABLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cohoma_detection
{
template <class ContainerAllocator>
struct TrapDisableRequest_
{
  typedef TrapDisableRequest_<ContainerAllocator> Type;

  TrapDisableRequest_()
    : disable_index(0)  {
    }
  TrapDisableRequest_(const ContainerAllocator& _alloc)
    : disable_index(0)  {
  (void)_alloc;
    }



   typedef int8_t _disable_index_type;
  _disable_index_type disable_index;





  typedef boost::shared_ptr< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrapDisableRequest_

typedef ::cohoma_detection::TrapDisableRequest_<std::allocator<void> > TrapDisableRequest;

typedef boost::shared_ptr< ::cohoma_detection::TrapDisableRequest > TrapDisableRequestPtr;
typedef boost::shared_ptr< ::cohoma_detection::TrapDisableRequest const> TrapDisableRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator1> & lhs, const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator2> & rhs)
{
  return lhs.disable_index == rhs.disable_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator1> & lhs, const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohoma_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a52f963e6612f28bce824419fdbb0bec";
  }

  static const char* value(const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa52f963e6612f28bULL;
  static const uint64_t static_value2 = 0xce824419fdbb0becULL;
};

template<class ContainerAllocator>
struct DataType< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohoma_detection/TrapDisableRequest";
  }

  static const char* value(const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 disable_index\n"
;
  }

  static const char* value(const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.disable_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrapDisableRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohoma_detection::TrapDisableRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohoma_detection::TrapDisableRequest_<ContainerAllocator>& v)
  {
    s << indent << "disable_index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.disable_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHOMA_DETECTION_MESSAGE_TRAPDISABLEREQUEST_H
