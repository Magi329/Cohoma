# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cohoma_detection/QRCode.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geographic_msgs.msg

class QRCode(genpy.Message):
  _md5sum = "be24b4a75c8581625be18ca7834eef5f"
  _type = "cohoma_detection/QRCode"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string raw_value #QR Code raw value
geographic_msgs/GeoPoint position #Trap position when detected
string nature     #Information about the trap signifacation in the real context
uint16 id         #Identificator of the trap
uint8 ngz_radius  #No Go Zone Radius around the trap
bool dsb_status   #The trap can be disabled or not
string dsb_code   #Code to transmit to disable the trap
bool contact_dsb  #The trap should be disabled by contact or not
string dsb_vector #Type of drone that can disable the trap
string other      #Diverse complementary (miscellaneous) informations
================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude
"""
  __slots__ = ['raw_value','position','nature','id','ngz_radius','dsb_status','dsb_code','contact_dsb','dsb_vector','other']
  _slot_types = ['string','geographic_msgs/GeoPoint','string','uint16','uint8','bool','string','bool','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       raw_value,position,nature,id,ngz_radius,dsb_status,dsb_code,contact_dsb,dsb_vector,other

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QRCode, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.raw_value is None:
        self.raw_value = ''
      if self.position is None:
        self.position = geographic_msgs.msg.GeoPoint()
      if self.nature is None:
        self.nature = ''
      if self.id is None:
        self.id = 0
      if self.ngz_radius is None:
        self.ngz_radius = 0
      if self.dsb_status is None:
        self.dsb_status = False
      if self.dsb_code is None:
        self.dsb_code = ''
      if self.contact_dsb is None:
        self.contact_dsb = False
      if self.dsb_vector is None:
        self.dsb_vector = ''
      if self.other is None:
        self.other = ''
    else:
      self.raw_value = ''
      self.position = geographic_msgs.msg.GeoPoint()
      self.nature = ''
      self.id = 0
      self.ngz_radius = 0
      self.dsb_status = False
      self.dsb_code = ''
      self.contact_dsb = False
      self.dsb_vector = ''
      self.other = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.raw_value
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.position.latitude, _x.position.longitude, _x.position.altitude))
      _x = self.nature
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H2B().pack(_x.id, _x.ngz_radius, _x.dsb_status))
      _x = self.dsb_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.contact_dsb
      buff.write(_get_struct_B().pack(_x))
      _x = self.dsb_vector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.other
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geographic_msgs.msg.GeoPoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raw_value = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.raw_value = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.position.latitude, _x.position.longitude, _x.position.altitude,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nature = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nature = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.id, _x.ngz_radius, _x.dsb_status,) = _get_struct_H2B().unpack(str[start:end])
      self.dsb_status = bool(self.dsb_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dsb_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dsb_code = str[start:end]
      start = end
      end += 1
      (self.contact_dsb,) = _get_struct_B().unpack(str[start:end])
      self.contact_dsb = bool(self.contact_dsb)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dsb_vector = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dsb_vector = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.other = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.other = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.raw_value
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.position.latitude, _x.position.longitude, _x.position.altitude))
      _x = self.nature
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H2B().pack(_x.id, _x.ngz_radius, _x.dsb_status))
      _x = self.dsb_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.contact_dsb
      buff.write(_get_struct_B().pack(_x))
      _x = self.dsb_vector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.other
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geographic_msgs.msg.GeoPoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raw_value = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.raw_value = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.position.latitude, _x.position.longitude, _x.position.altitude,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nature = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nature = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.id, _x.ngz_radius, _x.dsb_status,) = _get_struct_H2B().unpack(str[start:end])
      self.dsb_status = bool(self.dsb_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dsb_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dsb_code = str[start:end]
      start = end
      end += 1
      (self.contact_dsb,) = _get_struct_B().unpack(str[start:end])
      self.contact_dsb = bool(self.contact_dsb)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dsb_vector = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dsb_vector = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.other = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.other = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_H2B = None
def _get_struct_H2B():
    global _struct_H2B
    if _struct_H2B is None:
        _struct_H2B = struct.Struct("<H2B")
    return _struct_H2B
