# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cohoma_detection/QRCodeList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cohoma_detection.msg
import geographic_msgs.msg

class QRCodeList(genpy.Message):
  _md5sum = "1c78061eb6384448d766f4bff956a1b9"
  _type = "cohoma_detection/QRCodeList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """cohoma_detection/QRCode[] qrc_list
================================================================================
MSG: cohoma_detection/QRCode
string raw_value #QR Code raw value
geographic_msgs/GeoPoint position #Trap position when detected
string nature     #Information about the trap signifacation in the real context
uint16 id         #Identificator of the trap
uint8 ngz_radius  #No Go Zone Radius around the trap
bool dsb_status   #The trap can be disabled or not
string dsb_code   #Code to transmit to disable the trap
bool contact_dsb  #The trap should be disabled by contact or not
string dsb_vector #Type of drone that can disable the trap
string other      #Diverse complementary (miscellaneous) informations
================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude
"""
  __slots__ = ['qrc_list']
  _slot_types = ['cohoma_detection/QRCode[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       qrc_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QRCodeList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.qrc_list is None:
        self.qrc_list = []
    else:
      self.qrc_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.qrc_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.qrc_list:
        _x = val1.raw_value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _x = val1.nature
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_H2B().pack(_x.id, _x.ngz_radius, _x.dsb_status))
        _x = val1.dsb_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.contact_dsb
        buff.write(_get_struct_B().pack(_x))
        _x = val1.dsb_vector
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.other
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.qrc_list is None:
        self.qrc_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.qrc_list = []
      for i in range(0, length):
        val1 = cohoma_detection.msg.QRCode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.raw_value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.raw_value = str[start:end]
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.nature = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.nature = str[start:end]
        _x = val1
        start = end
        end += 4
        (_x.id, _x.ngz_radius, _x.dsb_status,) = _get_struct_H2B().unpack(str[start:end])
        val1.dsb_status = bool(val1.dsb_status)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dsb_code = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.dsb_code = str[start:end]
        start = end
        end += 1
        (val1.contact_dsb,) = _get_struct_B().unpack(str[start:end])
        val1.contact_dsb = bool(val1.contact_dsb)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dsb_vector = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.dsb_vector = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.other = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.other = str[start:end]
        self.qrc_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.qrc_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.qrc_list:
        _x = val1.raw_value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _x = val1.nature
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_H2B().pack(_x.id, _x.ngz_radius, _x.dsb_status))
        _x = val1.dsb_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.contact_dsb
        buff.write(_get_struct_B().pack(_x))
        _x = val1.dsb_vector
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.other
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.qrc_list is None:
        self.qrc_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.qrc_list = []
      for i in range(0, length):
        val1 = cohoma_detection.msg.QRCode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.raw_value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.raw_value = str[start:end]
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.nature = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.nature = str[start:end]
        _x = val1
        start = end
        end += 4
        (_x.id, _x.ngz_radius, _x.dsb_status,) = _get_struct_H2B().unpack(str[start:end])
        val1.dsb_status = bool(val1.dsb_status)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dsb_code = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.dsb_code = str[start:end]
        start = end
        end += 1
        (val1.contact_dsb,) = _get_struct_B().unpack(str[start:end])
        val1.contact_dsb = bool(val1.contact_dsb)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dsb_vector = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.dsb_vector = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.other = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.other = str[start:end]
        self.qrc_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_H2B = None
def _get_struct_H2B():
    global _struct_H2B
    if _struct_H2B is None:
        _struct_H2B = struct.Struct("<H2B")
    return _struct_H2B
